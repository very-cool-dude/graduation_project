import tkinter as tk
from tkinter import filedialog, messagebox
import requests
import os
import webbrowser
import logging
from pathlib import Path
from docx import Document

# ----------------------- –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø -----------------------
LOG_DIR = Path(__file__).parent.parent / "logs"
LOG_DIR.mkdir(exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(LOG_DIR / "frontend.log", mode="a", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# ---------------------- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ----------------------
msg_ip = '192.168.1.106:8000'

GATEWAY_AUTH_URL = f"http://{msg_ip}/auth"
GATEWAY_PROCESS_URL = f"http://{msg_ip}/process"
TEMPLATE_SYNC_URL = f"http://{msg_ip}/templates"
TEMPLATE_FILE_URL = f"http://{msg_ip}/template/"
TEMPLATE_DIR = Path(__file__).parent.parent / "templates"

# ---------------------- –ö–õ–ê–°–° GUI ----------------------
class FrontendApp:
    def __init__(self, root):
        self.root = root
        self.root.title("EMR Client")
        self.token = None
        self.role = None
        self.file_path = None
        self.templates = []

        TEMPLATE_DIR.mkdir(exist_ok=True)
        self.sync_templates()
        self.build_login_ui()

    def sync_templates(self):
        try:
            response = requests.get(TEMPLATE_SYNC_URL)
            data = response.json()
            logger.info(f"DEBUG TEMPLATE DATA: {data}")

            if not isinstance(data, list):
                raise Exception("–û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤, –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ: " + str(type(data)))

            for item in data:
                for ftype in ["docx", "prompt", "pdf"]:
                    fname = item[ftype].split("/")[-1]
                    fpath = TEMPLATE_DIR / fname
                    if not fpath.exists():
                        r = requests.get(TEMPLATE_FILE_URL + fname)
                        with open(fpath, "wb") as out:
                            out.write(r.content)

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤", str(e))
            logger.error(f"[–û–®–ò–ë–ö–ê sync_templates] {e}")

    def build_login_ui(self):
        self.login_frame = tk.Frame(self.root)
        self.login_frame.pack(padx=20, pady=20)

        tk.Label(self.login_frame, text="–õ–æ–≥–∏–Ω:").grid(row=0, column=0, sticky="e")
        self.login_entry = tk.Entry(self.login_frame)
        self.login_entry.grid(row=0, column=1)

        tk.Label(self.login_frame, text="–ü–∞—Ä–æ–ª—å:").grid(row=1, column=0, sticky="e")
        self.password_entry = tk.Entry(self.login_frame, show="*")
        self.password_entry.grid(row=1, column=1)

        tk.Button(self.login_frame, text="–í–æ–π—Ç–∏", command=self.try_login).grid(row=2, column=0, columnspan=2, pady=10)

    def try_login(self):
        login = self.login_entry.get()
        password = self.password_entry.get()

        if not login or not password:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å")
            return

        try:
            resp = requests.post(GATEWAY_AUTH_URL, json={"login": login, "password": password})
            if resp.status_code == 200:
                data = resp.json()
                self.token = data.get("token")
                self.role = data.get("role")
                self.login_frame.destroy()
                if self.role == "admin":
                    self.build_admin_ui()
                else:
                    self.build_operator_ui()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞", "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                logger.warning("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", str(e))
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

    def build_operator_ui(self):
        tk.Label(self.root, text="–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª (.wav):").pack(pady=5)
        tk.Button(self.root, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å WAV", command=self.select_wav).pack(pady=5)
        tk.Label(self.root, text="–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –æ—Ç—á—ë—Ç–∞ (.docx):").pack(pady=5)

        self.refresh_templates()
        self.template_var = tk.StringVar()
        if self.templates:
            self.template_var.set(self.templates[0])
        else:
            self.template_var.set("–ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤")

        self.template_menu = tk.OptionMenu(self.root, self.template_var, *self.templates)
        self.template_menu.pack(pady=5)
        self.update_template_menu()

        tk.Button(self.root, text="üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É", command=self.send_request).pack(pady=10)
        self.status = tk.Label(self.root, text="–°—Ç–∞—Ç—É—Å: –æ–∂–∏–¥–∞–Ω–∏–µ", fg="blue")
        self.status.pack(pady=10)

    def build_admin_ui(self):
        tk.Label(self.root, text="–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è PROMPT:").pack(pady=5)

        self.refresh_templates()
        self.template_var = tk.StringVar()
        self.template_var.set(self.templates[0] if self.templates else "–ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤")

        self.template_menu = tk.OptionMenu(self.root, self.template_var, *self.templates, command=self.load_prompt_for_template)
        self.template_menu.pack(pady=5)
        self.update_template_menu()

        tk.Label(self.root, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å PROMPT:").pack(pady=5)
        self.prompt_text = tk.Text(self.root, height=10, width=60)
        self.prompt_text.pack()

        tk.Button(self.root, text="üì• –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω (.docx)", command=self.download_docx).pack(pady=5)
        tk.Button(self.root, text="üëÅ –û—Ç–∫—Ä—ã—Ç—å PDF –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", command=self.open_pdf_preview).pack(pady=5)

        if self.templates:
            self.load_prompt_for_template(self.template_var.get())

        tk.Button(self.root, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å PROMPT", command=self.save_prompt).pack(pady=5)
        tk.Button(self.root, text="üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω", command=self.upload_docx).pack(pady=5)
        tk.Button(self.root, text="‚ûï –ù–æ–≤—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä", command=self.add_operator).pack(pady=5)

    def refresh_templates(self):
        self.templates = [f.name for f in TEMPLATE_DIR.glob("*.docx")]

    def load_prompt_for_template(self, template_name):
        prompt_file = TEMPLATE_DIR / template_name.replace(".docx", ".prompt.txt")
        self.prompt_text.delete("1.0", tk.END)
        if prompt_file.exists():
            with open(prompt_file, "r", encoding="utf-8") as f:
                self.prompt_text.insert(tk.END, f.read())

    def open_pdf_preview(self):
        base = self.template_var.get().replace(".docx", "")
        pdf_file = TEMPLATE_DIR / f"{base}.demo.pdf"
        if pdf_file.exists():
            webbrowser.open(f"file://{pdf_file.resolve()}")
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "PDF –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

    def download_docx(self):
        selected_template = self.template_var.get()
        source = TEMPLATE_DIR / selected_template
        dest = filedialog.asksaveasfilename(defaultextension=".docx", filetypes=[("DOCX files", "*.docx")])
        if dest:
            try:
                with open(source, "rb") as src, open(dest, "wb") as dst:
                    dst.write(src.read())
                messagebox.showinfo("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ", "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", str(e))

    def select_wav(self):
        path = filedialog.askopenfilename(filetypes=[("WAV files", "*.wav")])
        if path:
            self.file_path = path
            self.status.config(text=f"–§–∞–π–ª –≤—ã–±—Ä–∞–Ω: {os.path.basename(path)}")

    def send_request(self):
        if not self.file_path:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ WAV-—Ñ–∞–π–ª")
            return

        selected_template = self.template_var.get()
        prompt_file = TEMPLATE_DIR / selected_template.replace(".docx", ".prompt.txt")

        if not prompt_file.exists():
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–§–∞–π–ª PROMPT –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        with open(prompt_file, "r", encoding="utf-8") as f:
            prompt_text = f.read()

        try:
            self.status.config(text="‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç—á—ë—Ç...", fg="orange")
            logger.info("–°—Ç–∞—Ä—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

            headers = {"Authorization": f"Bearer {self.token}"}

            with open(self.file_path, "rb") as audio_file:
                files = {
                    "audio": (os.path.basename(self.file_path), audio_file, "audio/wav"),
                    "template_name": (None, selected_template),
                    "prompt": (None, prompt_text)
                }

                logger.info(f"POST -> /report | template={selected_template}")
                response = requests.post(GATEWAY_PROCESS_URL, files=files, headers=headers)
                logger.info(f"HTTP {response.status_code}")

            if response.status_code == 200:
                save_path = filedialog.asksaveasfilename(
                    defaultextension=".docx",
                    filetypes=[("DOCX files", "*.docx")],
                    title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç –∫–∞–∫..."
                )
                if save_path:
                    with open(save_path, "wb") as f:
                        f.write(response.content)
                    self.status.config(text="‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω", fg="green")
                    messagebox.showinfo("–£—Å–ø–µ—Ö", f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤:\n{save_path}")
                    logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {save_path}")
                else:
                    self.status.config(text="‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", fg="orange")
                    logger.warning("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            else:
                self.status.config(text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", fg="red")
                messagebox.showerror("–û—à–∏–±–∫–∞", response.text)
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")

        except Exception as e:
            self.status.config(text="‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", fg="red")
            messagebox.showerror("–û—à–∏–±–∫–∞", str(e))
            logger.exception(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

    def upload_docx(self):
        path = filedialog.askopenfilename(filetypes=[("DOCX files", "*.docx")])
        if path:
            existing = [f.name for f in TEMPLATE_DIR.glob("–®–∞–±–ª–æ–Ω_*.docx")]
            numbers = [int(f.split("_")[1].split(".")[0]) for f in existing if f.split("_")[1].split(".")[0].isdigit()]
            next_number = max(numbers, default=0) + 1
            new_name = f"–®–∞–±–ª–æ–Ω_{next_number}.docx"
            dest = TEMPLATE_DIR / new_name

            with open(path, "rb") as src, open(dest, "wb") as dst:
                dst.write(src.read())

            self.refresh_templates()
            self.template_var.set(new_name)
            self.update_template_menu()
            messagebox.showinfo("–£—Å–ø–µ—à–Ω–æ", f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ {new_name}")

    def update_template_menu(self):
        menu = self.template_menu["menu"]
        menu.delete(0, "end")
        for template in self.templates:
            menu.add_command(label=template, command=lambda value=template: self.template_var.set(value))

    def save_prompt(self):
        selected_template = self.template_var.get()
        prompt_file = TEMPLATE_DIR / selected_template.replace(".docx", ".prompt.txt")
        text = self.prompt_text.get("1.0", tk.END).strip()
        with open(prompt_file, "w", encoding="utf-8") as f:
            f.write(text)
        messagebox.showinfo("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", f"PROMPT —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è {selected_template}")

    def add_operator(self):
        messagebox.showinfo("–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", "–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä (–∑–∞–≥–ª—É—à–∫–∞)")

if __name__ == "__main__":
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
    root = tk.Tk()
    app = FrontendApp(root)
    root.mainloop()