from fastapi import FastAPI, Request, HTTPException, UploadFile, File, Form
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import StreamingResponse
from urllib.parse import quote
from pathlib import Path
import logging
import httpx

# ----------------------- –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø -----------------------
LOG_DIR = Path(__file__).parent.parent / "logs"
LOG_DIR.mkdir(exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(LOG_DIR / "gateway.log", mode="a", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)
logger.info("–°–µ—Ä–≤–∏—Å generator –∑–∞–ø—É—â–µ–Ω!")

# ----------------------- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø -----------------------
app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"]
)

AUTH_SERVICE_URL = "http://auth_service:8003/verify"
REPORT_SERVICE_URL = "http://report_service:8002"
STT_SERVICE_URL = "http://stt_service:8005/transcribe"
LLM_SERVICE_URL = "http://llm_service:8006/generate"

# ----------------------- –≠–ù–î–ü–û–ò–ù–¢–´ -----------------------
# üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
@app.post("/auth")
async def auth_route(request: Request):
    payload = await request.json()
    logger.info(f"üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞: {payload.get('login')}")
    try:
        async with httpx.AsyncClient() as client:
            resp = await client.post(AUTH_SERVICE_URL, json=payload)
            resp.raise_for_status()
            logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            return resp.json()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")

# üì• –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ + —à–∞–±–ª–æ–Ω–∞ + –ø—Ä–æ–º–ø—Ç–∞
@app.post("/process")
async def process_route(
    audio: UploadFile = File(...),
    template_name: str = Form(...),
    prompt: str = Form(...),
    request: Request = None
):
    logger.info(f"üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á—ë—Ç–∞ | —à–∞–±–ª–æ–Ω: {template_name}, —Ñ–∞–π–ª: {audio.filename}")
    try:
        async with httpx.AsyncClient(timeout=60) as client:
            files = {
                "audio": (audio.filename, await audio.read(), "audio/wav"),
                "template_name": (None, template_name),
                "prompt": (None, prompt),
            }

            headers = {}
            if request:
                auth_header = request.headers.get("Authorization")
                if auth_header:
                    headers["Authorization"] = auth_header

            resp = await client.post(f"{REPORT_SERVICE_URL}/report", files=files, headers=headers)
            resp.raise_for_status()

            logger.info("‚úÖ –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            content = resp.content
            return StreamingResponse(
                iter([content]),
                media_type=resp.headers.get("content-type", "application/octet-stream"),
                headers={
                    "Content-Disposition": resp.headers.get("Content-Disposition", "attachment; filename=report.docx")
                }
            )
    except httpx.HTTPStatusError as e:
        logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –æ—Ç report_service: {e.response.text}")
        raise HTTPException(status_code=e.response.status_code, detail=e.response.text)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

# üìÑ –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
@app.get("/templates")
async def proxy_template_list():
    logger.info("üìÑ –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤")
    try:
        async with httpx.AsyncClient() as client:
            r = await client.get(f"{REPORT_SERVICE_URL}/templates")
            r.raise_for_status()
            logger.info("‚úÖ –®–∞–±–ª–æ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã")
            return r.json()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤: {e}")

# üìÅ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω–∞
@app.get("/template/{filename}")
async def proxy_template_file(filename: str):
    logger.info(f"üìÅ –ó–∞–ø—Ä–æ—Å —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω–∞: {filename}")
    try:
        async with httpx.AsyncClient() as client:
            async with client.stream("GET", f"{REPORT_SERVICE_URL}/template/{filename}") as r:
                r.raise_for_status()
                file_bytes = b""
                async for chunk in r.aiter_bytes():
                    file_bytes += chunk

                filename_encoded = quote(filename)
                logger.info(f"‚úÖ –®–∞–±–ª–æ–Ω {filename} –ø–æ–ª—É—á–µ–Ω")
                return StreamingResponse(
                    iter([file_bytes]),
                    media_type=r.headers.get("content-type", "application/octet-stream"),
                    headers={
                        "Content-Disposition": f"attachment; filename*=UTF-8''{filename_encoded}"
                    }
                )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")