from fastapi import FastAPI, File, UploadFile
from fastapi.responses import JSONResponse
from gradio_client import Client, handle_file
from pathlib import Path
import shutil
import uuid
import logging

# ----------------------- –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø -----------------------
LOG_DIR = Path(__file__).parent.parent / "logs"
LOG_DIR.mkdir(exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(LOG_DIR / "transcriber.log", mode="a", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)
logger.info("–°–µ—Ä–≤–∏—Å transcriber –∑–∞–ø—É—â–µ–Ω!")

# ----------------------- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø -----------------------
app = FastAPI()

UPLOAD_DIR = Path("/tmp/uploads")
UPLOAD_DIR.mkdir(parents=True, exist_ok=True)

client = Client("hf-audio/whisper-large-v3")

# ----------------------- –≠–ù–î–ü–û–ò–ù–¢–´ -----------------------
@app.post("/transcribe")
async def transcribe(audio: UploadFile = File(...)):
    try:
        temp_filename = f"{uuid.uuid4()}.wav"
        temp_path = UPLOAD_DIR / temp_filename

        with open(temp_path, "wb") as buffer:
            shutil.copyfileobj(audio.file, buffer)

        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {audio.filename} ‚Üí {temp_filename}")

        result = client.predict(
            inputs=handle_file(str(temp_path)),
            task="transcribe",
            api_name="/predict"
        )

        logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ | –†–µ–∑—É–ª—å—Ç–∞—Ç: {result[:80]}...")
        return {"text": result}

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return JSONResponse(status_code=500, content={"error": str(e)})