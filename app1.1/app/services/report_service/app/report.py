from fastapi import FastAPI, UploadFile, File, Form, HTTPException
from fastapi.responses import FileResponse
from pathlib import Path
import aiofiles
import requests
import uuid
import logging
from tempfile import NamedTemporaryFile
from docx import Document

# ----------------------- –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø -----------------------
LOG_DIR = Path(__file__).parent.parent / "logs"
LOG_DIR.mkdir(exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(LOG_DIR / "report.log", mode="a", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)
logger.info("–°–µ—Ä–≤–∏—Å report –∑–∞–ø—É—â–µ–Ω!")

# ----------------------- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø -----------------------
app = FastAPI()

TEMPLATE_DIR = Path(__file__).parent / "templates"
STT_URL = "http://stt_service:8004/transcribe"
LLM_URL = "http://llm_service:8005/generate"

# ----------------------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò -----------------------
def fill_template(template_path: Path, replacements: dict, output_path: Path):
    doc = Document(template_path)
    for para in doc.paragraphs:
        for key, val in replacements.items():
            tag = f"{{{{{key}}}}}"
            if tag in para.text:
                para.text = para.text.replace(tag, val)
    doc.save(output_path)

# ----------------------- –≠–ù–î–ü–û–ò–ù–¢–´ -----------------------
@app.get("/templates")
def list_templates():
    docx_files = sorted(f for f in TEMPLATE_DIR.glob("*.docx"))
    result = []
    for docx in docx_files:
        base = docx.stem
        prompt = TEMPLATE_DIR / f"{base}.prompt.txt"
        pdf = TEMPLATE_DIR / f"{base}.demo.pdf"
        result.append({
            "docx": f"/template/{docx.name}",
            "prompt": f"/template/{prompt.name}" if prompt.exists() else "",
            "pdf": f"/template/{pdf.name}" if pdf.exists() else "",
        })
    logger.info(f"üìÑ –®–∞–±–ª–æ–Ω–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(result)}")
    return result

@app.get("/template/{filename}")
def get_template_file(filename: str):
    file_path = TEMPLATE_DIR / filename
    if file_path.exists():
        logger.info(f"üì§ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {filename}")
        return FileResponse(file_path)
    logger.warning(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}")
    raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

@app.post("/report")
async def generate_report(
    audio: UploadFile = File(...),
    template_name: str = Form(...),
    prompt: str = Form(...)
):
    logger.info(f"üì• –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é | —à–∞–±–ª–æ–Ω: {template_name} | —Ñ–∞–π–ª: {audio.filename}")

    temp_audio_path = Path("/tmp") / f"{uuid.uuid4()}.wav"
    try:
        async with aiofiles.open(temp_audio_path, "wb") as f:
            await f.write(await audio.read())
        logger.info(f"üîä –ê—É–¥–∏–æ—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {temp_audio_path.name}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ WAV: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞")

    # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ (STT)
    try:
        with open(temp_audio_path, "rb") as f:
            files = {"audio": (audio.filename, f, "audio/wav")}
            stt_resp = requests.post(STT_URL, files=files)
            stt_resp.raise_for_status()
        transcription = stt_resp.json().get("text", "")
        logger.info(f"üì° –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {transcription}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ STT: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ STT: {str(e)}")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM
    try:
        llm_payload = {
            "prompt": prompt,
            "transcription": transcription
        }
        llm_resp = requests.post(LLM_URL, json=llm_payload)
        llm_resp.raise_for_status()
        result_data = llm_resp.json().get("answer", {})
        logger.info(f"ü§ñ –û—Ç–≤–µ—Ç –æ—Ç LLM: {result_data}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ LLM: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è .docx
    try:
        template_path = TEMPLATE_DIR / template_name
        with NamedTemporaryFile(delete=False, suffix=".docx") as tmp:
            filled_path = Path(tmp.name)
            fill_template(template_path, result_data, filled_path)
            logger.info(f"üßæ DOCX —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {filled_path.name}")
            return FileResponse(
                filled_path,
                filename="–ì–æ—Ç–æ–≤—ã–π_–æ—Ç—á—ë—Ç.docx",
                media_type="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
            )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞")