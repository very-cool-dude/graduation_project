# auth_service.py ‚Äî —Å–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å SQLite –∏ —Ç–∞–±–ª–∏—Ü–µ–π —Ä–æ–ª–µ–π
from fastapi import FastAPI, HTTPException, Depends
from pydantic import BaseModel
from sqlalchemy import create_engine, Column, String, Integer, Table, MetaData, ForeignKey, select
from sqlalchemy.orm import sessionmaker
import hashlib
import os
from pathlib import Path
import logging

# ----------------------- –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø -----------------------
LOG_DIR = Path(__file__).parent.parent / "logs"
LOG_DIR.mkdir(exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(LOG_DIR / "authorization.log", mode="a", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)
logger.info("–°–µ—Ä–≤–∏—Å authorization –∑–∞–ø—É—â–µ–Ω!")

# ----------------------- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø -----------------------
app = FastAPI()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã SQLite
DATABASE_URL = "sqlite:////app/data_base/authorization.db"

engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
metadata = MetaData()

roles_table = Table(
    "roles",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("name", String, unique=True)
)

users_table = Table(
    "users",
    metadata,
    Column("login", String, primary_key=True),
    Column("password_hash", String),
    Column("role_id", Integer, ForeignKey("roles.id"))
)

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# ----------------------- –≠–ù–î–ü–û–ò–ù–¢–´ -----------------------
class AuthRequest(BaseModel):
    login: str
    password: str

@app.post("/verify")
def verify_user(auth: AuthRequest, db=Depends(get_db)):
    logger.info(f"üîê –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é: {auth.login}")

    query = select(users_table.c.login, users_table.c.password_hash, roles_table.c.name.label("role"))\
        .join(roles_table, users_table.c.role_id == roles_table.c.id)\
        .where(users_table.c.login == auth.login)

    user = db.execute(query).fetchone()
    if not user:
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {auth.login}")
        raise HTTPException(status_code=401, detail="User not found")

    hashed_input = hashlib.sha256(auth.password.encode()).hexdigest()
    if hashed_input != user.password_hash:
        logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å: {auth.login}")
        raise HTTPException(status_code=403, detail="Invalid credentials")

    logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {auth.login}, —Ä–æ–ª—å: {user.role}")
    return {"token": f"demo-token-{auth.login}", "role": user.role}